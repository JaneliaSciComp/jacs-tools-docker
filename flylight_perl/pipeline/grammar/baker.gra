# ****************************************************************************
# Resource name:  baker.gra          
# Written by:     Rob Svirskas
# Revision level: 1.0
# Date released:  2008-10-30
# Description:    This grammar will parse the qualified stack names
#                 for the Baker Lab's images.
# ****************************************************************************

# ****************************************************************************
# * Rules (non-terminal productions)                                         *
# ****************************************************************************
start: path
{
  my %data = &assign(\%item);
  $data{userid} = getlogin || getpwuid($<);
  # Fix line and genotype. Yeah, I'm lazy.
  $data{line} = $data{dir1} unless (exists $data{line});
  ($data{line},$data{short_genotype}) = split('__',$data{line})
    if ($data{line} =~ /__/);
  $data{heat_shock_landmark} =~ s/^-// if ($data{heat_shock_landmark});
  # Only the Baker Lab uses "tissue"
  $data{organ} = $data{tissue};
  # Base directories
  my $BASE = '/groups/baker/bakerlab/MicroscopeData';
  $data{img_application} = 'baker-image';
  # LSM files - the file names are guaranteed unique
  $data{lsm_dir} = join('/',$BASE,@data{qw(type_dir dir1)});
  $data{lsm_dir} = join('/',$data{lsm_dir},$data{dir2}) if ($data{dir2});
  $data{source_dir} = $data{lsm_dir};
  $data{lsm_file} = $data{source_file} = $data{file};
  $data{sage_image} = join('/',@data{qw(line source_file)});
  # Strip the extension off the file name
  (my $short = $data{file}) =~ s/\..*$//;
  $data{short_file} = $short;
  my $new_dir = $data{dir1};
  my $PRODUCT_BASE = '';
  if ('Baker_Confocal_Stacks' eq $data{type_dir}) {
    $PRODUCT_BASE = 'Baker_Secondary_Data';
    $data{designator} = 'baker-lab';
  }
  $BASE = join('/',$BASE,$PRODUCT_BASE);
  # Projections
  $data{projection_dir} = join('/',$BASE,'projections',$new_dir);
  $data{projection_loc} = join('/','projections',$new_dir);
  $data{projection_all_file} = $data{short_file} . '_00.jpg';
  $data{projection_pattern_file} = $data{short_file} . '_ch2_00.jpg';
  # Rotations
  $data{rotation_dir} = join('/',$BASE,'rotations',$new_dir);
  $data{rotation_loc} = join('/','rotations',$new_dir);
  $data{rotation_transient} = $data{short_file} . '.r.avi';
  $data{rotation_file} = $data{short_file} . '.r.mp4';
  # Translations (Z stack)
  $data{translation_dir} = join('/',$BASE,'translations',$new_dir);
  $data{translation_loc} = join('/','translations',$new_dir);
  $data{translation_transient} = $data{short_file} . '.t.avi';
  $data{translation_file} = $data{short_file} . '.t.mp4';
  # Link directories
  $data{link_dirs} = '';
  # Secondary data directories
  $data{secdata_dirs} = join ' ',@data{map { $_.'_dir' }
      qw(projection rotation translation)};
  $data{secdata_store} = join(',',qw(projection_all projection_pattern
                                     rotation translation));
  $data{substack_store} = join(',',qw(substack_all substack_pattern));
  $return = { $item[0] => join('/',@data{qw(type_dir dir1 file)}), %data };
} | <error>

path: standard
{
  my %data = &assign(\%item);
  $return = { %data };
} | <error>

# Baker runs
standard: type_dir '/' dir1 '/' file
{
  my %data = &assign(\%item);
  $return = { $item[0] => join('/',@data{qw(type_dir dir1 file)}), %data };
} | <error>

file: stack '.' extension
{
  my %data = &assign(\%item);
  $data{stack} = $data{qualified_stack};
  $return = { $item[0] => $data{stack} . '.' . $data{extension}, %data };
} | <error>

stack: qualified_stack
{
  my %data = &assign(\%item);
  $return = { %data };
} | <error>

# ****************************************************************************
# * Rules (terminal productions)                                             *
# ****************************************************************************

qualified_stack: 'BSB' '_' line ''
                 short_genotype
                 '__' gender tissue '-'
                 chron_stage '-' chron_hour
                 heat_shock_landmark
                 '-' specimen '_' uid
{
  $return = { $item[0] => join('',@item[1..$#item]), &assign(\%item) };
} | <error>

# ****************************************************************************
# * Terminals                                                                *
# ****************************************************************************
dir1: /[A-Za-z0-9_\-.]+/ | <error: illegal directory name>
line: /[A-Za-z0-9_\-]+(?=__)/ | <error: illegal line>
short_genotype: /__[A-Za-z0-9_\-]+(?=__)/ | '' | <error: illegal short genotype>
gender: 'f' | 'm' | 'x' | <error: illegal gender>
tissue: /[bvapgw]/ | /l[123]/ | <error: illegal tissue>
chron_stage: 'A' | 'E' | 'P02' | /L0[123]/ | <error: illegal chronological stage>
chron_hour: /\d+/ | <error: illegal chronological hour>
heat_shock_landmark: /\-h[elp]/ | '' | <error: illegal heat shock landmark>
specimen: /\d+/ | <error: illegal specimen number>
uid: /\d{17}/ | <error: illegal UID>
type_dir: 'Baker_Confocal_Stacks'
          | <error: illegal type directory name>
extension: 'lsm' | <error: illegal stack file extension>
