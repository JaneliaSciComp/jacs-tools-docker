# ****************************************************************************
# Resource name:  split_screen_review.gra      
# Written by:     Rob Svirskas
# Revision level: 1.1
# Date released:  2016-11-15
# Description:    This grammar will parse the qualified stack names
#                 (date/file) for Fly Light split screen review images.
# ****************************************************************************

# ****************************************************************************
# * Rules (non-terminal productions)                                         *
# ****************************************************************************
start: date '/' file
{
  my %data = &assign(\%item);
  $data{userid} = getlogin || getpwuid($<);
  # Some aliases to match other labs
  my @namedata = split(/\_/, $data{lsmname});
  $data{transformantid} = $data{lsmname};
  $data{source} = 'JFRC';

  # Base directories
  my $ARCHIVE_BASE = '/groups/flylight/flylight/split_screen_review';
  my $BASE = '/groups/flylight/flylight/split_screen_review';
  $data{img_application} = 'flylight-image';
  $data{family} = $data{designator} = 'split_screen_review';
  my $ORGANIZED = join '/',$ARCHIVE_BASE,'organizedData';
  my $SECONDARY = join '/',$BASE,'SecData';
  # LSM files
  $data{lsm_dir} = $data{source_dir} = $ARCHIVE_BASE . '/confocalStacks/' . $data{date};
  $data{lsm_file} = $data{source_file} = $data{file};
  $data{lsm_rel} = join '/',('..')x5,'confocalStacks',$data{date};
  (my $no_ext = $data{file}) =~ s/\..*$//;
  $data{sage_image} = join('/',@data{qw(date source_file)});
  # Common-structure directories (SecData projections is an outlier)
  foreach (qw(projection reference registration tiff translation)) {
    my $dir = join('/',$SECONDARY,($_ . 's'),$data{date});
    $dir .= "/$no_ext" if (/projection/);
    my $loc = join('/',($_ . 's'),$data{date});
    $loc .= "/$no_ext" if (/projection/);
    $data{$_ . '_dir'} = $dir;
    $data{$_ . '_loc'} = $loc;
    $data{$_ . '_rel'} = join '/',('..')x5,'SecData',$loc;
  }
  $data{short_file} = $no_ext;
  # Line Name
  my $line_name = "";
  my $get_line_name_cmd = 'perl /misc/sc/pipeline/bin/get_sage_line_name ' . $data{date} . "/" . $data{lsm_file};
  open (CMD3, "$get_line_name_cmd |");
  while (my $output = <CMD3>) {
       chomp($output);
       if ($output) {
               $line_name = $output;
       }
  }
  close (CMD3);
  $data{line} = $line_name;
  # Area
  my $area = "";
  my $get_area_cmd = 'perl /misc/sc/pipeline/bin/get_sage_area ' . $data{date} . "/" . $data{lsm_file};
  open (CMD5, "$get_area_cmd |");
  while (my $output = <CMD5>) {
        chomp($output);
        if ($output eq "Brain") {
                $area = "b";
        }
	if ($output eq "Ventral Nerve Cord") {
		$area =	"v";
	}
  }
  close (CMD5);
  $data{area} = $area;
  $data{organ} = $data{area};
  $data{reverse_zstack} = 0;
  # Channel Assignments
  my $list_img_channel_cmd = 'perl /misc/sc/pipeline/bin/list_img_channels ' .  $data{lsm_dir} . "/" . $data{lsm_file};
  my ($red_chan, $green_chan, $blue_chan, $ref_chan_num, $detect);
  open(CMD, "$list_img_channel_cmd |");
  my $detect = 0;
  while (my $output = <CMD>) {
    chomp($output);
    unless ($output =~ /Error/) {
        ($red_chan, $green_chan, $blue_chan, $ref_chan_num) = split(/\t/,$output);
        $detect = 1;
    }
  }
  close(CMD);
  $data{detect_chan} = $detect;
  $data{lsm_red_chan} = $red_chan;
  $data{lsm_green_chan} =  $green_chan;
  $data{lsm_blue_chan} = $blue_chan;
  $data{channel_one_color} = "black";
  $data{channel_two_color} = "Green";
  # Projections
  $data{projection_all_file} = $data{short_file} . '_total.png';
  $data{projection_pattern_file} = $data{short_file} . '_ch2_total.png';
  $data{projection_reference_sum} = $data{short_file} . '_ref_sum.jpg';
  $data{projection_ref_sum_file} = $data{projection_reference_sum};
  # Translations
  $data{translation_transient} = $data{short_file} . '.avi';
  $data{translation_file} = $data{short_file} . '.t.mp4';
  # TIFF and JPG files
  $data{tiff_file} = $data{short_file} . '.tif';
  $data{projection_file} = $data{short_file} . '_total.png';
  # Link directories
  $data{link_dirs} = join ' ',@data{map { $_.'_link' }
      qw(lsm tiff projection registration translation)};
  # Secondary data directories
  $data{secdata_dirs} = join ' ',@data{map { $_.'_dir' }
      qw(projection registration tiff translation)},$data{link_dirs};
  $data{secdata_store} = join(',',qw(projection_all projection_pattern));
  $return = { $item[0] => join('/',$data{date},$data{file}), %data };
} | <error>

file: stack '.' extension
{
  my %data = &assign(\%item);
  $return = { $item[0] => $data{stack} . '.' . $data{extension}, %data };
} | <error: illegal stack file>

stack: lsmname
{
   $return = { $item[0] => join('',@item[1..$#item]), &assign(\%item) };
}

# ****************************************************************************
# * Terminals                                                                *
# ****************************************************************************
date: /\d{4}(?:0[1-9]|1[012])(?:0[1-9]|[12]\d|3[01])/ | <error: illegal date>
lsmname: /[^\.]+/ | <error: illegal clipname>
extension: 'lsm' | <error: illegal extension>
